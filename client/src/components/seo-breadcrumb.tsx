import React from 'react';
import { Link, useLocation } from 'wouter';
import { Home } from 'lucide-react';
import {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@/components/ui/breadcrumb';

export interface SEOBreadcrumbItem {
  label: string;
  href?: string;
  isCurrentPage?: boolean;
}

interface SEOBreadcrumbProps {
  items?: SEOBreadcrumbItem[];
  className?: string;
  showHome?: boolean;
  homeLabel?: string;
}

export function SEOBreadcrumb({
  items = [],
  className,
  showHome = true,
  homeLabel = 'Home'
}: SEOBreadcrumbProps) {
  const [location] = useLocation();
  
  // Auto-generate breadcrumbs based on current path if no items provided
  const autoGeneratedItems = React.useMemo(() => {
    if (items.length > 0) return items;
    
    const pathSegments = location.split('/').filter(Boolean);
    const breadcrumbs: SEOBreadcrumbItem[] = [];
    
    let currentPath = '';
    
    pathSegments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      const isLast = index === pathSegments.length - 1;
      
      // Clean up segment for display
      let label = segment
        .replace(/-/g, ' ')
        .replace(/\b\w/g, l => l.toUpperCase());
        
      // Special cases for better labels
      if (segment === 'city-guides') label = 'City Guides';
      if (segment.includes('city-guide')) {
        const cityName = segment.replace('-city-guide', '');
        label = cityName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) + ' City Guide';
      }
      if (segment === 'blog') label = 'Blog';
      if (segment === 'about') label = 'About';
      if (segment === 'buy') label = 'Buy';
      if (segment === 'sell') label = 'Sell';
      if (segment === 'contact') label = 'Contact';
      
      breadcrumbs.push({
        label,
        href: isLast ? undefined : currentPath,
        isCurrentPage: isLast
      });
    });
    
    return breadcrumbs;
  }, [location, items]);
  
  // Combine home with other items
  const allItems = showHome 
    ? [{ label: homeLabel, href: location === '/' ? undefined : '/' }, ...autoGeneratedItems]
    : autoGeneratedItems;
  
  // Generate structured data for breadcrumbs
  const structuredData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": allItems.map((item, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "name": item.label,
      ...(item.href && { "item": `https://4seasonsrealestate.com${item.href}` })
    }))
  };
  
  React.useEffect(() => {
    // Add structured data to head
    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.textContent = JSON.stringify(structuredData);
    script.id = 'breadcrumb-structured-data';
    
    // Remove existing breadcrumb structured data
    const existing = document.getElementById('breadcrumb-structured-data');
    if (existing) {
      existing.remove();
    }
    
    document.head.appendChild(script);
    
    return () => {
      if (document.head.contains(script)) {
        document.head.removeChild(script);
      }
    };
  }, [structuredData]);
  
  if (allItems.length <= 1) {
    return null; // Don't show breadcrumbs for home page or single-level pages
  }
  
  return (
    <Breadcrumb className={className}>
      <BreadcrumbList>
        {allItems.map((item, index) => (
          <React.Fragment key={index}>
            <BreadcrumbItem>
              {item.href ? (
                <BreadcrumbLink asChild>
                  <Link href={item.href}>
                    <a className="inline-flex items-center space-x-1">
                      {index === 0 && showHome && (
                        <Home size={14} className="mr-1" />
                      )}
                      <span>{item.label}</span>
                    </a>
                  </Link>
                </BreadcrumbLink>
              ) : (
                <BreadcrumbPage className="inline-flex items-center space-x-1">
                  {index === 0 && showHome && (
                    <Home size={14} className="mr-1" />
                  )}
                  <span>{item.label}</span>
                </BreadcrumbPage>
              )}
            </BreadcrumbItem>
            
            {index < allItems.length - 1 && <BreadcrumbSeparator />}
          </React.Fragment>
        ))}
      </BreadcrumbList>
    </Breadcrumb>
  );
}

// Preset breadcrumb configurations for common pages
export const breadcrumbPresets = {
  cityGuide: (cityName: string) => [
    { label: 'City Guides', href: '/city-guides' },
    { label: `${cityName} City Guide`, isCurrentPage: true }
  ],
  
  blogPost: (postTitle: string) => [
    { label: 'Blog', href: '/blog' },
    { label: postTitle, isCurrentPage: true }
  ],
  
  service: (serviceName: string) => [
    { label: 'Services', href: '/services' },
    { label: serviceName, isCurrentPage: true }
  ]
} as const;